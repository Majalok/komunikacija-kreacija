{"version":3,"sources":["webpack:///./src/components/seo.js","webpack:///./src/templates/Novica.js"],"names":["SEO","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","Novica","props","render","post","this","data","markdownRemark","siteTitle","className","frontmatter","intro","dangerouslySetInnerHTML","__html","html","React","Component"],"mappings":"qLAYA,SAASA,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAC9BC,EAASC,yBAAe,cAAxBD,KAaFE,EAAkBN,GAAeI,EAAKG,aAAaP,YAEzD,OACE,kBAAC,IAAD,CACEQ,eAAgB,CACdP,QAEFE,MAAOA,EACPM,cAAa,QAAUL,EAAKG,aAAaJ,MACzCD,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASR,GAEX,CACES,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASP,EAAKG,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAASR,GAEX,CACEO,KAAK,sBACLC,QAASL,IAEXQ,OAAOZ,KAKfH,EAAIgB,aAAe,CACjBd,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD,IChFTiB,E,YACJ,WAAYC,GAAQ,OAClB,YAAMA,IADW,K,oCAGnBC,OAAA,WACE,IAAMC,EAAOC,KAAKH,MAAMI,KAAKC,eACvBC,EAAYH,KAAKH,MAAMI,KAAKjB,KAAKG,aAAaJ,MAEpD,OACE,kBAAC,IAAD,CAAQA,MAAOoB,GAEb,6BAASC,UAAU,mBACjB,gCACE,wBAAIA,UAAU,8BACXL,EAAKM,YAAYtB,OAGpB,uBAAGqB,UAAU,wBAAwBL,EAAKM,YAAYC,QAExD,6BACEF,UAAU,uBACVG,wBAAyB,CAAEC,OAAQT,EAAKU,W,GArB/BC,IAAMC,WAgDZf","file":"component---src-templates-novica-js-f972853a3492836d2c6d.js","sourcesContent":["/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Helmet from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nfunction SEO({ description, lang, meta, title }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata.author,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `sl`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nclass Novica extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n  render() {\n    const post = this.props.data.markdownRemark\n    const siteTitle = this.props.data.site.siteMetadata.title\n    /*     const { previous, next } = this.props.pageContext */\n    return (\n      <Layout title={siteTitle}>\n        {/*  <SEO title={post.frontmatter.title} /> */}\n        <article className=\"content-section\">\n          <header>\n            <h5 className=\"news-item-title item-title\">\n              {post.frontmatter.title}\n            </h5>\n\n            <p className=\"news-content-section\">{post.frontmatter.intro}</p>\n          </header>\n          <section\n            className=\"news-content-section\"\n            dangerouslySetInnerHTML={{ __html: post.html }}\n          />\n        </article>\n\n        {/*      <nav>\n          <ul className=\"ul-news-link\">\n            <li>\n              {previous && (\n                <Link to={previous.fields.slug} rel=\"prev\" className=\"link-news\">\n                  ← {previous.frontmatter.title}\n                </Link>\n              )}\n            </li>\n            <li>\n              {next && (\n                <Link to={next.fields.slug} rel=\"next\" className=\"link-news\">\n                  {next.frontmatter.title} →\n                </Link>\n              )}\n            </li>\n          </ul>\n        </nav> */}\n      </Layout>\n    )\n  }\n}\n\nexport default Novica\n\nexport const pageQuery1 = graphql`\n  query BlogPostBySlug {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark {\n      id\n      html\n      frontmatter {\n        title\n        intro\n      }\n    }\n  }\n`\n"],"sourceRoot":""}